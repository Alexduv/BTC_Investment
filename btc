import pandas as pd
import matplotlib.pyplot as plt

def calculate_portfolio_growth(initial_investment, monthly_investment, bitcoin_values):
    portfolio_values = [initial_investment]
    for i in range(1, len(bitcoin_values)):
        portfolio_value = portfolio_values[-1] + monthly_investment
        portfolio_value *= (bitcoin_values[i] / bitcoin_values[i - 1])  # Utilisation du rapport des prix
        portfolio_values.append(portfolio_value)
    return portfolio_values

def calculate_one_time_investment(initial_investment, bitcoin_values):
    portfolio_values = [initial_investment]
    for i in range(1, len(bitcoin_values)):
        portfolio_value = portfolio_values[-1] + initial_investment
        portfolio_value *= (bitcoin_values[i] / bitcoin_values[i - 1])  # Utilisation du rapport des prix
        portfolio_values.append(portfolio_value)
    return portfolio_values

def main():
    # Charger les données depuis Excel
    df = pd.read_excel('BTC_Investment.xlsx')

    # Afficher les premières lignes du DataFrame pour vérification
    print(df.head())

    # Filtrer les données à partir du 1er janvier 2020
    df = df[df['Date'] >= '2020-01-01']

    # Afficher les données filtrées
    print("Données filtrées :")
    print(df)

    # Scénario 1 : Investissement mensuel de 100€ chaque 1er jour du mois depuis le 1er janvier 2020
    scenario1_values = calculate_portfolio_growth(0, 100, df['BTC_Value'])

    # Scénario 2 : Investissement unique de 5000€ le 1er janvier 2020
    scenario2_values = calculate_one_time_investment(5000, df['BTC_Value'])

    # Tracé du graphique avec des couleurs spécifiques
    plt.plot(df['Date'], scenario1_values, label='Investissement mensuel de 100€ chaque mois', color='blue')
    plt.plot(df['Date'], scenario2_values, label='Investissement unique de 5000€ le 1er janvier 2020', color='red')

    plt.title('Comparaison des scénarios d\'investissement Bitcoin')
    plt.xlabel('Date')
    plt.ylabel('Valeur du portefeuille (en euros)')
    plt.legend()
    plt.grid(True)
    plt.show()

if __name__ == "__main__":
    main()
